// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package types is a generated GoMock package.
package types

import (
	sdk "github.com/cosmos/cosmos-sdk/types"
	authtypes "github.com/cosmos/cosmos-sdk/x/auth/types"
	gomock "github.com/golang/mock/gomock"
	"github.com/tendermint/iavl/common"
	"github.com/tendermint/tendermint/libs/kv"

	//common "github.com/tendermint/tendermint/libs/common"
	client "github.com/tendermint/tendermint/rpc/client"
	core_types "github.com/tendermint/tendermint/rpc/core/types"
	types "github.com/tendermint/tendermint/types"
	reflect "reflect"
)

// MockBaseClient is a mock of BaseClient interface
type MockBaseClient struct {
	ctrl     *gomock.Controller
	recorder *MockBaseClientMockRecorder
}

// MockBaseClientMockRecorder is the mock recorder for MockBaseClient
type MockBaseClientMockRecorder struct {
	mock *MockBaseClient
}

// NewMockBaseClient creates a new mock instance
func NewMockBaseClient(ctrl *gomock.Controller) *MockBaseClient {
	mock := &MockBaseClient{ctrl: ctrl}
	mock.recorder = &MockBaseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBaseClient) EXPECT() *MockBaseClientMockRecorder {
	return m.recorder
}

// Block mocks base method
func (m *MockBaseClient) Block(height *int64) (*core_types.ResultBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", height)
	ret0, _ := ret[0].(*core_types.ResultBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block
func (mr *MockBaseClientMockRecorder) Block(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockBaseClient)(nil).Block), height)
}

// BlockResults mocks base method
func (m *MockBaseClient) BlockResults(height *int64) (*core_types.ResultBlockResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockResults", height)
	ret0, _ := ret[0].(*core_types.ResultBlockResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockResults indicates an expected call of BlockResults
func (mr *MockBaseClientMockRecorder) BlockResults(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockResults", reflect.TypeOf((*MockBaseClient)(nil).BlockResults), height)
}

// Commit mocks base method
func (m *MockBaseClient) Commit(height *int64) (*core_types.ResultCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", height)
	ret0, _ := ret[0].(*core_types.ResultCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit
func (mr *MockBaseClientMockRecorder) Commit(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockBaseClient)(nil).Commit), height)
}

// Validators mocks base method
func (m *MockBaseClient) Validators(height *int64) (*core_types.ResultValidators, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validators", height)
	ret0, _ := ret[0].(*core_types.ResultValidators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validators indicates an expected call of Validators
func (mr *MockBaseClientMockRecorder) Validators(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validators", reflect.TypeOf((*MockBaseClient)(nil).Validators), height)
}

// Tx mocks base method
func (m *MockBaseClient) Tx(hash []byte, prove bool) (*core_types.ResultTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx", hash, prove)
	ret0, _ := ret[0].(*core_types.ResultTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tx indicates an expected call of Tx
func (mr *MockBaseClientMockRecorder) Tx(hash, prove interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockBaseClient)(nil).Tx), hash, prove)
}

// TxSearch mocks base method
func (m *MockBaseClient) TxSearch(query string, prove bool, page, perPage int) (*core_types.ResultTxSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxSearch", query, prove, page, perPage)
	ret0, _ := ret[0].(*core_types.ResultTxSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxSearch indicates an expected call of TxSearch
func (mr *MockBaseClientMockRecorder) TxSearch(query, prove, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxSearch", reflect.TypeOf((*MockBaseClient)(nil).TxSearch), query, prove, page, perPage)
}

// Query mocks base method
func (m *MockBaseClient) Query(path string, key common.HexBytes) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", path, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockBaseClientMockRecorder) Query(path, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockBaseClient)(nil).Query), path, key)
}

// QueryStore mocks base method
func (m *MockBaseClient) QueryStore(key common.HexBytes, storeName, endPath string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryStore", key, storeName, endPath)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStore indicates an expected call of QueryStore
func (mr *MockBaseClientMockRecorder) QueryStore(key, storeName, endPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStore", reflect.TypeOf((*MockBaseClient)(nil).QueryStore), key, storeName, endPath)
}

// QuerySubspace mocks base method
func (m *MockBaseClient) QuerySubspace(subspace []byte, storeName string) ([]kv.Pair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySubspace", subspace, storeName)
	ret0, _ := ret[0].([]kv.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySubspace indicates an expected call of QuerySubspace
func (mr *MockBaseClientMockRecorder) QuerySubspace(subspace, storeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySubspace", reflect.TypeOf((*MockBaseClient)(nil).QuerySubspace), subspace, storeName)
}

// Broadcast mocks base method
func (m *MockBaseClient) Broadcast(txBytes []byte, broadcastMode string) (sdk.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", txBytes, broadcastMode)
	ret0, _ := ret[0].(sdk.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Broadcast indicates an expected call of Broadcast
func (mr *MockBaseClientMockRecorder) Broadcast(txBytes, broadcastMode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockBaseClient)(nil).Broadcast), txBytes, broadcastMode)
}

// BuildAndBroadcast mocks base method
func (m *MockBaseClient) BuildAndBroadcast(fromName, passphrase, memo string, msgs []sdk.Msg, accNumber, seqNumber uint64) (sdk.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildAndBroadcast", fromName, passphrase, memo, msgs, accNumber, seqNumber)
	ret0, _ := ret[0].(sdk.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildAndBroadcast indicates an expected call of BuildAndBroadcast
func (mr *MockBaseClientMockRecorder) BuildAndBroadcast(fromName, passphrase, memo, msgs, accNumber, seqNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildAndBroadcast", reflect.TypeOf((*MockBaseClient)(nil).BuildAndBroadcast), fromName, passphrase, memo, msgs, accNumber, seqNumber)
}

// BuildStdTx mocks base method
func (m *MockBaseClient) BuildStdTx(fromName, passphrase, memo string, msgs []sdk.Msg, accNumber, seqNumber uint64) (authtypes.StdTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildStdTx", fromName, passphrase, memo, msgs, accNumber, seqNumber)
	ret0, _ := ret[0].(authtypes.StdTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildStdTx indicates an expected call of BuildStdTx
func (mr *MockBaseClientMockRecorder) BuildStdTx(fromName, passphrase, memo, msgs, accNumber, seqNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildStdTx", reflect.TypeOf((*MockBaseClient)(nil).BuildStdTx), fromName, passphrase, memo, msgs, accNumber, seqNumber)
}

// BuildUnsignedStdTxOffline mocks base method
func (m *MockBaseClient) BuildUnsignedStdTxOffline(msgs []sdk.Msg, memo string) authtypes.StdTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildUnsignedStdTxOffline", msgs, memo)
	ret0, _ := ret[0].(authtypes.StdTx)
	return ret0
}

// BuildUnsignedStdTxOffline indicates an expected call of BuildUnsignedStdTxOffline
func (mr *MockBaseClientMockRecorder) BuildUnsignedStdTxOffline(msgs, memo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildUnsignedStdTxOffline", reflect.TypeOf((*MockBaseClient)(nil).BuildUnsignedStdTxOffline), msgs, memo)
}

// CalculateGas mocks base method
func (m *MockBaseClient) CalculateGas(txBytes []byte) (authtypes.StdFee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateGas", txBytes)
	ret0, _ := ret[0].(authtypes.StdFee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateGas indicates an expected call of CalculateGas
func (mr *MockBaseClientMockRecorder) CalculateGas(txBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateGas", reflect.TypeOf((*MockBaseClient)(nil).CalculateGas), txBytes)
}

// BuildTxForSim mocks base method
func (m *MockBaseClient) BuildTxForSim(msgs []sdk.Msg, memo string, accNumber, seqNumber uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildTxForSim", msgs, memo, accNumber, seqNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildTxForSim indicates an expected call of BuildTxForSim
func (mr *MockBaseClientMockRecorder) BuildTxForSim(msgs, memo, accNumber, seqNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildTxForSim", reflect.TypeOf((*MockBaseClient)(nil).BuildTxForSim), msgs, memo, accNumber, seqNumber)
}

// GetCodec mocks base method
func (m *MockBaseClient) GetCodec() SDKCodec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodec")
	ret0, _ := ret[0].(SDKCodec)
	return ret0
}

// GetCodec indicates an expected call of GetCodec
func (mr *MockBaseClientMockRecorder) GetCodec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodec", reflect.TypeOf((*MockBaseClient)(nil).GetCodec))
}

// GetConfig mocks base method
func (m *MockBaseClient) GetConfig() ClientConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(ClientConfig)
	return ret0
}

// GetConfig indicates an expected call of GetConfig
func (mr *MockBaseClientMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockBaseClient)(nil).GetConfig))
}

// MockTxHandler is a mock of TxHandler interface
type MockTxHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTxHandlerMockRecorder
}

// MockTxHandlerMockRecorder is the mock recorder for MockTxHandler
type MockTxHandlerMockRecorder struct {
	mock *MockTxHandler
}

// NewMockTxHandler creates a new mock instance
func NewMockTxHandler(ctrl *gomock.Controller) *MockTxHandler {
	mock := &MockTxHandler{ctrl: ctrl}
	mock.recorder = &MockTxHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxHandler) EXPECT() *MockTxHandlerMockRecorder {
	return m.recorder
}

// BuildAndBroadcast mocks base method
func (m *MockTxHandler) BuildAndBroadcast(fromName, passphrase, memo string, msgs []sdk.Msg, accNumber, seqNumber uint64) (sdk.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildAndBroadcast", fromName, passphrase, memo, msgs, accNumber, seqNumber)
	ret0, _ := ret[0].(sdk.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildAndBroadcast indicates an expected call of BuildAndBroadcast
func (mr *MockTxHandlerMockRecorder) BuildAndBroadcast(fromName, passphrase, memo, msgs, accNumber, seqNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildAndBroadcast", reflect.TypeOf((*MockTxHandler)(nil).BuildAndBroadcast), fromName, passphrase, memo, msgs, accNumber, seqNumber)
}

// BuildStdTx mocks base method
func (m *MockTxHandler) BuildStdTx(fromName, passphrase, memo string, msgs []sdk.Msg, accNumber, seqNumber uint64) (authtypes.StdTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildStdTx", fromName, passphrase, memo, msgs, accNumber, seqNumber)
	ret0, _ := ret[0].(authtypes.StdTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildStdTx indicates an expected call of BuildStdTx
func (mr *MockTxHandlerMockRecorder) BuildStdTx(fromName, passphrase, memo, msgs, accNumber, seqNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildStdTx", reflect.TypeOf((*MockTxHandler)(nil).BuildStdTx), fromName, passphrase, memo, msgs, accNumber, seqNumber)
}

// BuildUnsignedStdTxOffline mocks base method
func (m *MockTxHandler) BuildUnsignedStdTxOffline(msgs []sdk.Msg, memo string) authtypes.StdTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildUnsignedStdTxOffline", msgs, memo)
	ret0, _ := ret[0].(authtypes.StdTx)
	return ret0
}

// BuildUnsignedStdTxOffline indicates an expected call of BuildUnsignedStdTxOffline
func (mr *MockTxHandlerMockRecorder) BuildUnsignedStdTxOffline(msgs, memo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildUnsignedStdTxOffline", reflect.TypeOf((*MockTxHandler)(nil).BuildUnsignedStdTxOffline), msgs, memo)
}

// MockSimulationHandler is a mock of SimulationHandler interface
type MockSimulationHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSimulationHandlerMockRecorder
}

// MockSimulationHandlerMockRecorder is the mock recorder for MockSimulationHandler
type MockSimulationHandlerMockRecorder struct {
	mock *MockSimulationHandler
}

// NewMockSimulationHandler creates a new mock instance
func NewMockSimulationHandler(ctrl *gomock.Controller) *MockSimulationHandler {
	mock := &MockSimulationHandler{ctrl: ctrl}
	mock.recorder = &MockSimulationHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSimulationHandler) EXPECT() *MockSimulationHandlerMockRecorder {
	return m.recorder
}

// CalculateGas mocks base method
func (m *MockSimulationHandler) CalculateGas(txBytes []byte) (authtypes.StdFee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateGas", txBytes)
	ret0, _ := ret[0].(authtypes.StdFee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateGas indicates an expected call of CalculateGas
func (mr *MockSimulationHandlerMockRecorder) CalculateGas(txBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateGas", reflect.TypeOf((*MockSimulationHandler)(nil).CalculateGas), txBytes)
}

// BuildTxForSim mocks base method
func (m *MockSimulationHandler) BuildTxForSim(msgs []sdk.Msg, memo string, accNumber, seqNumber uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildTxForSim", msgs, memo, accNumber, seqNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildTxForSim indicates an expected call of BuildTxForSim
func (mr *MockSimulationHandlerMockRecorder) BuildTxForSim(msgs, memo, accNumber, seqNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildTxForSim", reflect.TypeOf((*MockSimulationHandler)(nil).BuildTxForSim), msgs, memo, accNumber, seqNumber)
}

// MockClientQuery is a mock of ClientQuery interface
type MockClientQuery struct {
	ctrl     *gomock.Controller
	recorder *MockClientQueryMockRecorder
}

// MockClientQueryMockRecorder is the mock recorder for MockClientQuery
type MockClientQueryMockRecorder struct {
	mock *MockClientQuery
}

// NewMockClientQuery creates a new mock instance
func NewMockClientQuery(ctrl *gomock.Controller) *MockClientQuery {
	mock := &MockClientQuery{ctrl: ctrl}
	mock.recorder = &MockClientQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientQuery) EXPECT() *MockClientQueryMockRecorder {
	return m.recorder
}

// Block mocks base method
func (m *MockClientQuery) Block(height *int64) (*core_types.ResultBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", height)
	ret0, _ := ret[0].(*core_types.ResultBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block
func (mr *MockClientQueryMockRecorder) Block(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockClientQuery)(nil).Block), height)
}

// BlockResults mocks base method
func (m *MockClientQuery) BlockResults(height *int64) (*core_types.ResultBlockResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockResults", height)
	ret0, _ := ret[0].(*core_types.ResultBlockResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockResults indicates an expected call of BlockResults
func (mr *MockClientQueryMockRecorder) BlockResults(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockResults", reflect.TypeOf((*MockClientQuery)(nil).BlockResults), height)
}

// Commit mocks base method
func (m *MockClientQuery) Commit(height *int64) (*core_types.ResultCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", height)
	ret0, _ := ret[0].(*core_types.ResultCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit
func (mr *MockClientQueryMockRecorder) Commit(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockClientQuery)(nil).Commit), height)
}

// Validators mocks base method
func (m *MockClientQuery) Validators(height *int64) (*core_types.ResultValidators, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validators", height)
	ret0, _ := ret[0].(*core_types.ResultValidators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validators indicates an expected call of Validators
func (mr *MockClientQueryMockRecorder) Validators(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validators", reflect.TypeOf((*MockClientQuery)(nil).Validators), height)
}

// Tx mocks base method
func (m *MockClientQuery) Tx(hash []byte, prove bool) (*core_types.ResultTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx", hash, prove)
	ret0, _ := ret[0].(*core_types.ResultTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tx indicates an expected call of Tx
func (mr *MockClientQueryMockRecorder) Tx(hash, prove interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockClientQuery)(nil).Tx), hash, prove)
}

// TxSearch mocks base method
func (m *MockClientQuery) TxSearch(query string, prove bool, page, perPage int) (*core_types.ResultTxSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxSearch", query, prove, page, perPage)
	ret0, _ := ret[0].(*core_types.ResultTxSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxSearch indicates an expected call of TxSearch
func (mr *MockClientQueryMockRecorder) TxSearch(query, prove, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxSearch", reflect.TypeOf((*MockClientQuery)(nil).TxSearch), query, prove, page, perPage)
}

// Query mocks base method
func (m *MockClientQuery) Query(path string, key common.HexBytes) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", path, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockClientQueryMockRecorder) Query(path, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockClientQuery)(nil).Query), path, key)
}

// QueryStore mocks base method
func (m *MockClientQuery) QueryStore(key common.HexBytes, storeName, endPath string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryStore", key, storeName, endPath)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStore indicates an expected call of QueryStore
func (mr *MockClientQueryMockRecorder) QueryStore(key, storeName, endPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStore", reflect.TypeOf((*MockClientQuery)(nil).QueryStore), key, storeName, endPath)
}

// QuerySubspace mocks base method
func (m *MockClientQuery) QuerySubspace(subspace []byte, storeName string) ([]kv.Pair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySubspace", subspace, storeName)
	ret0, _ := ret[0].([]kv.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySubspace indicates an expected call of QuerySubspace
func (mr *MockClientQueryMockRecorder) QuerySubspace(subspace, storeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySubspace", reflect.TypeOf((*MockClientQuery)(nil).QuerySubspace), subspace, storeName)
}

// MockClientTx is a mock of ClientTx interface
type MockClientTx struct {
	ctrl     *gomock.Controller
	recorder *MockClientTxMockRecorder
}

// MockClientTxMockRecorder is the mock recorder for MockClientTx
type MockClientTxMockRecorder struct {
	mock *MockClientTx
}

// NewMockClientTx creates a new mock instance
func NewMockClientTx(ctrl *gomock.Controller) *MockClientTx {
	mock := &MockClientTx{ctrl: ctrl}
	mock.recorder = &MockClientTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientTx) EXPECT() *MockClientTxMockRecorder {
	return m.recorder
}

// Broadcast mocks base method
func (m *MockClientTx) Broadcast(txBytes []byte, broadcastMode string) (sdk.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", txBytes, broadcastMode)
	ret0, _ := ret[0].(sdk.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Broadcast indicates an expected call of Broadcast
func (mr *MockClientTxMockRecorder) Broadcast(txBytes, broadcastMode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockClientTx)(nil).Broadcast), txBytes, broadcastMode)
}

// MockRPCClient is a mock of RPCClient interface
type MockRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockRPCClientMockRecorder
}

// MockRPCClientMockRecorder is the mock recorder for MockRPCClient
type MockRPCClientMockRecorder struct {
	mock *MockRPCClient
}

// NewMockRPCClient creates a new mock instance
func NewMockRPCClient(ctrl *gomock.Controller) *MockRPCClient {
	mock := &MockRPCClient{ctrl: ctrl}
	mock.recorder = &MockRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRPCClient) EXPECT() *MockRPCClientMockRecorder {
	return m.recorder
}

// ABCIInfo mocks base method
func (m *MockRPCClient) ABCIInfo() (*core_types.ResultABCIInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ABCIInfo")
	ret0, _ := ret[0].(*core_types.ResultABCIInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ABCIInfo indicates an expected call of ABCIInfo
func (mr *MockRPCClientMockRecorder) ABCIInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ABCIInfo", reflect.TypeOf((*MockRPCClient)(nil).ABCIInfo))
}

// ABCIQuery mocks base method
func (m *MockRPCClient) ABCIQuery(path string, data common.HexBytes) (*core_types.ResultABCIQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ABCIQuery", path, data)
	ret0, _ := ret[0].(*core_types.ResultABCIQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ABCIQuery indicates an expected call of ABCIQuery
func (mr *MockRPCClientMockRecorder) ABCIQuery(path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ABCIQuery", reflect.TypeOf((*MockRPCClient)(nil).ABCIQuery), path, data)
}

// ABCIQueryWithOptions mocks base method
func (m *MockRPCClient) ABCIQueryWithOptions(path string, data common.HexBytes, opts client.ABCIQueryOptions) (*core_types.ResultABCIQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ABCIQueryWithOptions", path, data, opts)
	ret0, _ := ret[0].(*core_types.ResultABCIQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ABCIQueryWithOptions indicates an expected call of ABCIQueryWithOptions
func (mr *MockRPCClientMockRecorder) ABCIQueryWithOptions(path, data, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ABCIQueryWithOptions", reflect.TypeOf((*MockRPCClient)(nil).ABCIQueryWithOptions), path, data, opts)
}

// BroadcastTxCommit mocks base method
func (m *MockRPCClient) BroadcastTxCommit(tx types.Tx) (*core_types.ResultBroadcastTxCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastTxCommit", tx)
	ret0, _ := ret[0].(*core_types.ResultBroadcastTxCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTxCommit indicates an expected call of BroadcastTxCommit
func (mr *MockRPCClientMockRecorder) BroadcastTxCommit(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTxCommit", reflect.TypeOf((*MockRPCClient)(nil).BroadcastTxCommit), tx)
}

// BroadcastTxAsync mocks base method
func (m *MockRPCClient) BroadcastTxAsync(tx types.Tx) (*core_types.ResultBroadcastTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastTxAsync", tx)
	ret0, _ := ret[0].(*core_types.ResultBroadcastTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTxAsync indicates an expected call of BroadcastTxAsync
func (mr *MockRPCClientMockRecorder) BroadcastTxAsync(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTxAsync", reflect.TypeOf((*MockRPCClient)(nil).BroadcastTxAsync), tx)
}

// BroadcastTxSync mocks base method
func (m *MockRPCClient) BroadcastTxSync(tx types.Tx) (*core_types.ResultBroadcastTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastTxSync", tx)
	ret0, _ := ret[0].(*core_types.ResultBroadcastTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTxSync indicates an expected call of BroadcastTxSync
func (mr *MockRPCClientMockRecorder) BroadcastTxSync(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTxSync", reflect.TypeOf((*MockRPCClient)(nil).BroadcastTxSync), tx)
}

// Block mocks base method
func (m *MockRPCClient) Block(height *int64) (*core_types.ResultBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", height)
	ret0, _ := ret[0].(*core_types.ResultBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block
func (mr *MockRPCClientMockRecorder) Block(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockRPCClient)(nil).Block), height)
}

// BlockResults mocks base method
func (m *MockRPCClient) BlockResults(height *int64) (*core_types.ResultBlockResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockResults", height)
	ret0, _ := ret[0].(*core_types.ResultBlockResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockResults indicates an expected call of BlockResults
func (mr *MockRPCClientMockRecorder) BlockResults(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockResults", reflect.TypeOf((*MockRPCClient)(nil).BlockResults), height)
}

// Commit mocks base method
func (m *MockRPCClient) Commit(height *int64) (*core_types.ResultCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", height)
	ret0, _ := ret[0].(*core_types.ResultCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit
func (mr *MockRPCClientMockRecorder) Commit(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockRPCClient)(nil).Commit), height)
}

// Validators mocks base method
func (m *MockRPCClient) Validators(height *int64) (*core_types.ResultValidators, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validators", height)
	ret0, _ := ret[0].(*core_types.ResultValidators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validators indicates an expected call of Validators
func (mr *MockRPCClientMockRecorder) Validators(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validators", reflect.TypeOf((*MockRPCClient)(nil).Validators), height)
}

// Tx mocks base method
func (m *MockRPCClient) Tx(hash []byte, prove bool) (*core_types.ResultTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx", hash, prove)
	ret0, _ := ret[0].(*core_types.ResultTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tx indicates an expected call of Tx
func (mr *MockRPCClientMockRecorder) Tx(hash, prove interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockRPCClient)(nil).Tx), hash, prove)
}

// TxSearch mocks base method
func (m *MockRPCClient) TxSearch(query string, prove bool, page, perPage int) (*core_types.ResultTxSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxSearch", query, prove, page, perPage)
	ret0, _ := ret[0].(*core_types.ResultTxSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxSearch indicates an expected call of TxSearch
func (mr *MockRPCClientMockRecorder) TxSearch(query, prove, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxSearch", reflect.TypeOf((*MockRPCClient)(nil).TxSearch), query, prove, page, perPage)
}
